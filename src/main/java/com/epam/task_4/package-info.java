/**
 * 1. Создать интерфейс Cache с методами доступа к кешу. Создать несколько наследников, у каждого из них будет своё локальное хранилище данных.
 * Создать аннотацию @Cache с параметром name - именем кеша, вешается на класс. Создать аннотацию @InjectCache с именем кеша,который будет
 * инжектиться. Её можно вешать на поля любого класса. Создать класс инжектора, который будет пробегать по полям инстанса и сетить туда правильный
 * кеш. Показать, что вывод класса меняется в зависимости от того, какой кеш был засечен.
 *  Требования:
 *  - Что будет делать класс, в который инжектится кеш, на вашей совести. Требований нет. Главное, чтобы он так или иначе использовал и выводил содержимое кеша.
 *  - SRP - каждый класс должен выполнять ровно одно действие. Например, в задачи кеша не входит самозаполнение данными, это обязанность некоего другого класса.
 *  - Метод main() должен состоять ровно из одной строки: вызова некоего стороннего класса, в котором и будет происходить вся логика. Будем привыкать к тому,
 *    что в приложениях зачастую мы не можем сами определять main().
 *  - В задании намеренно опущены некоторые детали реализации, их придётся понять и сделать самостоятельно.
 *  - Не забываем, что в иерархии класса может быть больше одного родителя и его поля могут быть приватными. Учитываем этот кейс и показываем его в выводе.
 *  - Для простоты пускай у всех кешей ключом к данным будет Integer, а значением - String
 *
 *  2. Создаём класс Person с полями name, age, sex. Создаём Supplier< Person >, для их наполнения, пусть он набивает людей с рандомными данными. Генерим стрим
 *  c помощью этого сапплаера (так как стрим получится бесконечным, ограничьте количество анализируемых элементов). Дальше с помощью map(), reduce() и прочей
 *  функциональщины считаем разные аналитики по людям:
 *  - средний возраст
 *  - отсортируйте людей по возрасту по возрастанию
 *  - количество людей с одинаковыми именами (получите пары "имя" - "количество людей")
 *  - выделите метод который будет на вход принимать функцию, которая будет произведена над каждым элементом стрима. Передайте в этот метод функцию, которая
 *    для всех женщин убавляет возраст на 10 лет. Эмбрионов с отрицательным возрастом получаться не должно.
 *  - выфильтруйте из стрима всех несовершеннолетних
 *
 *  Требования те же, что и выше + каждое задание должно быть выполнено лишь последовательностью трансформаций над стримом.
 *
 *  Не забываем все отдельные действия выносить в методы и выводить в System.out результат каждого действия (до и после). Нейминг всех сущностей и действий должен
 *  быть таким, чтобы человек, не знающий задания, мог понять, что в вашем коде происходит.
 */
package com.epam.task_4;